(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0c82ec"],{5490:function(e,t,l){"use strict";l.r(t);var o=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("div",{attrs:{id:"extra-component-select-demo"}},[e._m(0),l("select-dropdown-options"),l("select-selecting-values")],1)},s=[function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("p",{staticClass:"mb-4"},[l("a",{attrs:{href:"http://sagalbot.github.io/vue-select/",target:"_blank",rel:"nofollow"}},[e._v("vue-select")]),e._v(" is a native Vue.js select component that provides similar functionality to Select2. Read full documnetation "),l("a",{attrs:{href:"http://sagalbot.github.io/vue-select/docs/",target:"_blank",rel:"nofollow"}},[e._v("here")])])}],a=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Dropdown Options"}},[l("p",[e._v(" vue-select accepts arrays of strings or objects to use as options through the "),l("code",[e._v("options")]),e._v(" prop ")]),l("div",{staticClass:"mt-5"},[l("dropdown-options-basic"),l("dropdown-options-option-labels")],1)])},n=[],c=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Basic","code-toggler":"","no-shadow":"","card-border":""}},[l("div",[l("v-select",{attrs:{options:["foo","bar"]}}),l("p",{staticClass:"my-5"},[e._v(" When provided an array of objects, "),l("code",[e._v("vue-select")]),e._v(" will display a single value of the object. By default, "),l("code",[e._v("vue-select")]),e._v(" will look for a key named "),l("code",[e._v("label")]),e._v(" on the object to use as display text ")]),l("v-select",{attrs:{options:[{label:"Foo",value:"foo"}]}})],1),l("template",{slot:"codeContainer"},[e._v(" <template> <v-select :options=\"['foo','bar']\"></v-select> <v-select :options=\"[{label: 'Foo', value: 'foo'}]\"></v-select> </template> <script> import vSelect from 'vue-select' export default{ components: { 'v-select': vSelect, } } <\/script> ")])],2)},r=[],i=l("4a7a"),u=l.n(i),p={components:{"v-select":u.a}},d=p,v=l("2877"),m=Object(v["a"])(d,c,r,!1,null,null,null),b=m.exports,g=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Option Labels","code-toggler":"","no-shadow":"","card-border":""}},[l("div",[l("p",{staticClass:"mb-3"},[e._v(" When the options array contains objects, vue-select looks for the label key to display by default. You can set your own label to match your source data using the label prop ")]),l("v-select",{attrs:{label:"countryName",options:e.countries}})],1),l("template",{slot:"codeContainer"},[e._v(' <template> <v-select label="countryName" :options="countries"></v-select> </template> <script> import vSelect from \'vue-select\' export default{ data() { return { countries: [ { countryCode: "INR", countryName: "India", }, { countryCode: "AUS", countryName: "Australia", }, { countryCode: "CA", countryName: "Canada", }, ] } }, components: { \'v-select\': vSelect, } } <\/script> ')])],2)},h=[],f=l("8d51"),_=l.n(f),y={data:function(){return{countries:[{countryCode:"INR",countryName:"India"},{countryCode:"AUS",countryName:"Australia"},{countryCode:"CA",countryName:"Canada"}]}},components:{"v-select":u.a,Prism:_.a}},w=y,S=Object(v["a"])(w,g,h,!1,null,null,null),C=S.exports,x={data:function(){return{}},components:{DropdownOptionsBasic:b,DropdownOptionsOptionLabels:C}},O=x,j=Object(v["a"])(O,a,n,!1,null,null,null),k=j.exports,T=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Selecting Values"}},[l("div",[l("selecting-values-default"),l("selecting-values-single-multiple-selection"),l("selecting-values-tagging")],1)])},V=[],N=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Default","code-toggler":"","no-shadow":"","card-border":""}},[l("div",[l("p",{staticClass:"mb-3"},[e._v(" The most common use case for vue-select is to have the chosen value synced with a parent component. vue-select takes advantage of the v-model syntax to sync values with a parent ")]),l("v-select",{attrs:{options:e.options},model:{value:e.selected,callback:function(t){e.selected=t},expression:"selected"}}),l("br"),l("p",[e._v(" If you don't require the value to be synced, you can also pass the prop directly: ")]),l("prism",{staticClass:"rounded-lg"},[e._v(' <v-select :value="selected"></v-select> ')]),l("p",{staticClass:"mt-5"},[e._v(" This method allows you to pre-select a value(s), without syncing any changes to the parent component. This is also very useful when using a state management tool, like Vuex ")])],1),l("template",{slot:"codeContainer"},[e._v(" <template> <v-select v-model=\"selected\" :options=\"options\"></v-select><br> </template> <script> import vSelect from 'vue-select' export default{ data() { return { options: [ {id: 1, label: 'foo'}, {id: 3, label: 'bar'}, {id: 2, label: 'baz'}, ], selected: {id: 3, label: 'bar'}, } }, components: { 'v-select': vSelect, } } <\/script> ")])],2)},E=[],$={data:function(){return{options:[{id:1,label:"foo"},{id:3,label:"bar"},{id:2,label:"baz"}],selected:{id:3,label:"bar"}}},components:{"v-select":u.a,Prism:_.a}},I=$,A=Object(v["a"])(I,N,E,!1,null,null,null),D=A.exports,z=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Single/Multiple Selection","code-toggler":"","no-shadow":"","card-border":""}},[l("div",[l("p",{staticClass:"mb-3"},[e._v(" By default, vue-select supports choosing a single value. If you need multiple values, use the multiple prop ")]),l("v-select",{attrs:{multiple:"",closeOnSelect:!1,options:e.options},model:{value:e.selected,callback:function(t){e.selected=t},expression:"selected"}}),l("br")],1),l("template",{slot:"codeContainer"},[e._v(" <template> <v-select multiple v-model=\"selected\" :options=\"options\"></v-select><br> </template> <script> import vSelect from 'vue-select' export default{ data() { return { selected: ['foo','bar'], options: ['foo','bar','baz'] } }, components: { 'v-select': vSelect, } } <\/script> ")])],2)},B=[],P={data:function(){return{selected:["foo","bar"],options:["foo","bar","baz"]}},components:{"v-select":u.a}},R=P,F=Object(v["a"])(R,z,B,!1,null,null,null),J=F.exports,L=function(){var e=this,t=e.$createElement,l=e._self._c||t;return l("vx-card",{attrs:{title:"Tagging","code-toggler":"","no-shadow":"","card-border":""}},[l("div",[l("p",{staticClass:"mb-3"},[e._v(" To allow input that's not present within the options, set the taggable prop to true. If you want new tags to be pushed to the options list, set push-tags to true ")]),l("br"),l("h6",{staticClass:"mb-2"},[e._v("Vue Select - Taggable")]),l("v-select",{attrs:{taggable:""}}),l("br"),l("h6",{staticClass:"mb-2"},[e._v("Vue Select - Taggable & Push-Tags")]),l("v-select",{attrs:{taggable:"","push-tags":""}}),l("small",{staticClass:"muted"},[e._v("Try adding a tag and removing it. It'll still be present within the options list.")])],1),l("template",{slot:"codeContainer"},[e._v(" <template> <h6>Vue Select - Taggable</h6> <v-select taggable></v-select> <h6>Vue Select - Taggable &amp; Push-Tags</h6> <v-select taggable push-tags></v-select> </template> <script> import vSelect from 'vue-select' export default{ data() { return { options: [] } }, components: { 'v-select': vSelect, } } <\/script> ")])],2)},M=[],U={data:function(){return{options:[]}},components:{"v-select":u.a}},W=U,q=Object(v["a"])(W,L,M,!1,null,null,null),Y=q.exports,G={components:{SelectingValuesDefault:D,SelectingValuesSingleMultipleSelection:J,SelectingValuesTagging:Y}},H=G,K=Object(v["a"])(H,T,V,!1,null,null,null),Q=K.exports,X={components:{SelectDropdownOptions:k,SelectSelectingValues:Q}},Z=X,ee=Object(v["a"])(Z,o,s,!1,null,null,null);t["default"]=ee.exports}}]);
//# sourceMappingURL=chunk-2d0c82ec.35efdb5e.js.map